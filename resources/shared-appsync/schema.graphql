# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. RUN scripts/combineSchemas TO REGENERATE

schema { 
  query: Query 
  mutation: Mutation 
  subscription: Subscription  
}










enum Action {
  TRACK
  PEOPLE
}

type Answer @aws_api_key {
  MCQ: [Boolean!]
  TrueFalse: Boolean
  ShortAnswer: String
}

input AnswerInput {
  MCQ: [Boolean!]
  TrueFalse: Boolean
  ShortAnswer: String
}

scalar AWSDate

scalar AWSDateTime

scalar AWSEmail

scalar AWSIPAddress

scalar AWSJSON

scalar AWSPhone

scalar AWSTime

scalar AWSTimestamp

scalar AWSURL

type Leaderboard @aws_api_key {
  user: User!
  coinTotal: Int!
  correctStreak: Int!
  coinChange: Int!
  leaderboardPosition: Int!
}

type Mutation {
  sendQuestion(input: QuestionInput!): Question! @aws_api_key
  sendResponse(input: ResponseInput!): Response! @aws_api_key
  joinMeeting(meetingId: ID!, user: UserInput!): NewParticipant! @aws_api_key
  mixpanel(action: Action!, event: String!, properties: AWSJSON!): Int! @aws_api_key
  roleRequest(input: RoleRequestInput!): RoleRequest! @aws_api_key
  roleResponse(input: RoleResponseInput!): RoleResponse! @aws_api_key
}

type NewParticipant @aws_api_key {
  role: Role!
  classId: ID!
}

type Options @aws_api_key {
  MCQ: [String]
  TrueFalse: [Boolean!]
}

input OptionsInput {
  MCQ: [String]
  TrueFalse: [Boolean!]
}

enum Promise {
  PENDING
  APPROVED
  REJECTED
}

"""
extend type Subscription {
  changeClass(meetingId: ID!): ID @aws_subscribe(mutations: ["setClass"])
}
"""
type Query {
  getLeaderboard(meetingId: ID!, user: UserInput!): [Leaderboard]! @aws_api_key
}

type Question @aws_api_key {
  questionId: ID!
  questionDateTime: AWSDateTime!
  numStudents: Int!
  classId: ID!
  meetingId: ID!
  user: User!
  type: QuestionType!
  image: String
  text: String
  options: Options!
  answer: Answer
}

input QuestionInput {
  classId: ID!
  meetingId: ID!
  user: UserInput!
  type: QuestionType!
  image: String
  text: String
  options: OptionsInput!
  answer: AnswerInput
}

enum QuestionType {
  MCQ
  TrueFalse
  ShortAnswer
}

type Response @aws_api_key {
  respondDateTime: AWSDateTime!
  isCorrect: Boolean
  coinsEarned: Int!
  meetingId: ID!
  answerer: User!
  questionDateTime: AWSDateTime!
  questionId: ID!
  type: QuestionType!
  theirAnswer: Answer!
}

input ResponseInput {
  classId: ID!
  meetingId: ID!
  answerer: UserInput!
  questionDateTime: AWSDateTime!
  questionId: ID!
  type: QuestionType!
  answer: AnswerInput
  theirAnswer: AnswerInput!
}

enum Role {
  TEACHER
  STUDENT
}

type RoleRequest @aws_api_key {
  meetingId: ID!
  newRole: Role!
  requestee: User!
  status: Promise!
}

input RoleRequestInput {
  meetingId: ID!
  newRole: Role!
  requestee: UserInput!
}

type RoleResponse @aws_api_key {
  meetingId: ID!
  newRole: Role!
  requestee: User!
  status: Promise!
  judge: User!
}

input RoleResponseInput {
  meetingId: ID!
  newRole: Role!
  requestee: UserInput!
  status: Promise!
  judge: UserInput!
}

type Subscription {
  showQuestion(meetingId: ID!): Question @aws_subscribe(mutations: ["sendQuestion"])
  showResponse(meetingId: ID!): Response @aws_subscribe(mutations: ["sendResponse"])
  showRoleRequest(meetingId: ID!): RoleRequest @aws_subscribe(mutations: ["roleRequest"])
  showRoleResponse(meetingId: ID!): RoleResponse @aws_subscribe(mutations: ["roleResponse"])
}

type User {
  name: String!
  id: ID!
  avatar: AWSURL
  role: Role!
}

input UserInput {
  name: String!
  id: ID!
  avatar: AWSURL
  role: Role!
}
